# Copyright (C) 2020 Benita
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#

# Dominant-UserBot UserBot - 

""" UserBot hazƒ±rlanƒ±≈üƒ±. """

import os
import re

from sys import version_info
from logging import basicConfig, getLogger, INFO, DEBUG
from distutils.util import strtobool as sb
from math import ceil
import importlib

from pylast import LastFMNetwork, md5
from pySmartDL import SmartDL
from dotenv import load_dotenv
from requests import get
from telethon.tl.types import InputMessagesFilterDocument
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.sync import TelegramClient, custom, events
from telethon.sessions import StringSession
from telethon.utils import get_peer_id
load_dotenv("config.env")


def paginate_help(page_number, loaded_modules, prefix):
    number_of_rows = 5
    number_of_cols = 2
    helpable_modules = []
    for p in loaded_modules:
        if not p.startswith("_"):
            helpable_modules.append(p)
    helpable_modules = sorted(helpable_modules)
    modules = [custom.Button.inline(
        "{} {}".format("üî∏", x),
        data="ub_modul_{}".format(x))
        for x in helpable_modules]
    pairs = list(zip(modules[::number_of_cols], modules[1::number_of_cols]))
    if len(modules) % number_of_cols == 1:
        pairs.append((modules[-1],))
    max_num_pages = ceil(len(pairs) / number_of_rows)
    modulo_page = page_number % max_num_pages
    if len(pairs) > number_of_rows:
        pairs = pairs[modulo_page * number_of_rows:number_of_rows * (modulo_page + 1)] + \
            [
            (custom.Button.inline("‚¨ÖÔ∏èGeri", data="{}_prev({})".format(prefix, modulo_page)),
             custom.Button.inline("ƒ∞leri‚û°Ô∏è", data="{}_next({})".format(prefix, modulo_page)))
        ]
    return pairs


# Bot g√ºnl√ºkleri kurulumu:
CONSOLE_LOGGER_VERBOSE = sb(os.environ.get("CONSOLE_LOGGER_VERBOSE", "False"))

ASYNC_POOL = []

if CONSOLE_LOGGER_VERBOSE:
    basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=DEBUG,
    )
else:
    basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                level=INFO)
LOGS = getLogger(__name__)

if version_info[0] < 3 or version_info[1] < 6:
    LOGS.info("En az python 3.6 s√ºr√ºm√ºne sahip olmanƒ±z gerekir."
              "Birden fazla √∂zellik buna baƒülƒ±dƒ±r. Bot kapatƒ±lƒ±yor.")
    quit(1)

# Yapƒ±landƒ±rmanƒ±n √∂nceden kullanƒ±lan deƒüi≈ükeni kullanarak d√ºzenlenip d√ºzenlenmediƒüini kontrol edin.
# Temel olarak, yapƒ±landƒ±rma dosyasƒ± i√ßin kontrol.
CONFIG_CHECK = os.environ.get(
    "___________LUTFEN_______BU_____SATIRI_____SILIN__________", None)

if CONFIG_CHECK:
    LOGS.info(
        "L√ºtfen ilk hashtag'de belirtilen satƒ±rƒ± config.env dosyasƒ±ndan kaldƒ±rƒ±n"
    )
    quit(1)

# Telegram API KEY ve HASH
API_KEY = os.environ.get("API_KEY", None)
API_HASH = os.environ.get("API_HASH", None)

SILINEN_PLUGIN = {}
# UserBot Session String
STRING_SESSION = os.environ.get("STRING_SESSION", None)

# Kanal / Grup ID yapƒ±landƒ±rmasƒ±nƒ± g√ºnl√ºƒüe kaydetme.
BOTLOG_CHATID = int(os.environ.get("BOTLOG_CHATID", None))

# UserBot g√ºnl√ºkleme √∂zelliƒüi.
BOTLOG = sb(os.environ.get("BOTLOG", "False"))
LOGSPAMMER = sb(os.environ.get("LOGSPAMMER", "False"))

# Hey! Bu bir bot. Endi≈üelenme ;)
PM_AUTO_BAN = sb(os.environ.get("PM_AUTO_BAN", "False"))

# G√ºncelleyici i√ßin Heroku hesap bilgileri.
HEROKU_MEMEZ = sb(os.environ.get("HEROKU_MEMEZ", "False"))
HEROKU_APPNAME = os.environ.get("HEROKU_APPNAME", None)
HEROKU_APIKEY = os.environ.get("HEROKU_APIKEY", None)

# G√ºncelleyici i√ßin √∂zel (fork) repo linki.
UPSTREAM_REPO_URL = os.environ.get(
    "UPSTREAM_REPO_URL",
    "https://github.com/DominantUser/Dominant-UserBot.git")

# Ayrƒ±ntƒ±lƒ± konsol g√ºnl√ºg√º
CONSOLE_LOGGER_VERBOSE = sb(os.environ.get("CONSOLE_LOGGER_VERBOSE", "False"))

# SQL Veritabanƒ±
DB_URI = os.environ.get("DATABASE_URL", None)

# OCR API key
OCR_SPACE_API_KEY = os.environ.get("OCR_SPACE_API_KEY", None)

# remove.bg API key
REM_BG_API_KEY = os.environ.get("REM_BG_API_KEY", None)

# AUTO PP
AUTO_PP = os.environ.get("AUTO_PP", None)

# Chrome s√ºr√ºc√ºs√º ve Google Chrome dosyalarƒ±
CHROME_DRIVER = os.environ.get("CHROME_DRIVER", None)
GOOGLE_CHROME_BIN = os.environ.get("GOOGLE_CHROME_BIN", None)

# Plugin ƒ∞√ßin
PLUGIN_CHANNEL_ID = int(os.environ.get("PLUGIN_CHANNEL_ID", None))

# OpenWeatherMap API Key
OPEN_WEATHER_MAP_APPID = os.environ.get("OPEN_WEATHER_MAP_APPID", None)
WEATHER_DEFCITY = os.environ.get("WEATHER_DEFCITY", None)

# Lydia API
LYDIA_API_KEY = os.environ.get("LYDIA_API_KEY", None)

# Anti Spambot
ANTI_SPAMBOT = sb(os.environ.get("ANTI_SPAMBOT", "False"))
ANTI_SPAMBOT_SHOUT = sb(os.environ.get("ANTI_SPAMBOT_SHOUT", "False"))

# Youtube API key
YOUTUBE_API_KEY = os.environ.get("YOUTUBE_API_KEY", None)

# Saat & Tarih - √úlke ve Saat Dilimi
COUNTRY = str(os.environ.get("COUNTRY", ""))
TZ_NUMBER = int(os.environ.get("TZ_NUMBER", 1))

# Temiz Kar≈üƒ±lama
CLEAN_WELCOME = sb(os.environ.get("CLEAN_WELCOME", "True"))

# Last.fm Mod√ºl√º
BIO_PREFIX = os.environ.get("BIO_PREFIX", None)
DEFAULT_BIO = os.environ.get("DEFAULT_BIO", None)

LASTFM_API = os.environ.get("LASTFM_API", None)
LASTFM_SECRET = os.environ.get("LASTFM_SECRET", None)
LASTFM_USERNAME = os.environ.get("LASTFM_USERNAME", None)
LASTFM_PASSWORD_PLAIN = os.environ.get("LASTFM_PASSWORD", None)
LASTFM_PASS = md5(LASTFM_PASSWORD_PLAIN)
if LASTFM_API and LASTFM_SECRET and LASTFM_USERNAME and LASTFM_PASS:
    lastfm = LastFMNetwork(api_key=LASTFM_API,
                           api_secret=LASTFM_SECRET,
                           username=LASTFM_USERNAME,
                           password_hash=LASTFM_PASS)
else:
    lastfm = None

# Google Drive Mod√ºl√º
G_DRIVE_CLIENT_ID = os.environ.get("G_DRIVE_CLIENT_ID", None)
G_DRIVE_CLIENT_SECRET = os.environ.get("G_DRIVE_CLIENT_SECRET", None)
G_DRIVE_AUTH_TOKEN_DATA = os.environ.get("G_DRIVE_AUTH_TOKEN_DATA", None)
GDRIVE_FOLDER_ID = os.environ.get("GDRIVE_FOLDER_ID", None)
TEMP_DOWNLOAD_DIRECTORY = os.environ.get("TMP_DOWNLOAD_DIRECTORY",
                                         "./downloads")

# Inline bot √ßalƒ±≈ümasƒ± i√ßin
BOT_TOKEN = os.environ.get("BOT_TOKEN", None)
BOT_USERNAME = os.environ.get("BOT_USERNAME", None)

# Genius mod√ºl√ºn√ºn √ßalƒ±≈ümasƒ± i√ßin buradan deƒüeri alƒ±n https://genius.com/developers her ikisi de aynƒ± deƒüerlere sahiptir
GENIUS = os.environ.get("GENIUS", None)
CMD_HELP = {}


# CloudMail.ru ve MEGA.nz ayarlama
if not os.path.exists('bin'):
    os.mkdir('bin')

binaries = {
    "https://raw.githubusercontent.com/yshalsager/megadown/master/megadown":
    "bin/megadown",
    "https://raw.githubusercontent.com/yshalsager/cmrudl.py/master/cmrudl.py":
    "bin/cmrudl"
}

for binary, path in binaries.items():
    downloader = SmartDL(binary, path, progress_bar=False)
    downloader.start()
    os.chmod(path, 0o755)

# 'bot' deƒüi≈ükeni
if STRING_SESSION:
    # pylint: devre dƒ±≈üƒ±=ge√ßersiz ad
    bot = TelegramClient(StringSession(STRING_SESSION), API_KEY, API_HASH)
else:
    # pylint: devre dƒ±≈üƒ±=ge√ßersiz ad
    bot = TelegramClient("userbot", API_KEY, API_HASH)


async def check_botlog_chatid():
    if not BOTLOG_CHATID and LOGSPAMMER:
        LOGS.info(
            "√ñzel hata g√ºnl√ºƒü√ºn√ºn √ßalƒ±≈ümasƒ± i√ßin yapƒ±landƒ±rmadan BOTLOG_CHATID deƒüi≈ükenini ayarlamanƒ±z gerekir.")
        quit(1)

    elif not BOTLOG_CHATID and BOTLOG:
        LOGS.info(
            "G√ºnl√ºƒüe kaydetme √∂zelliƒüinin √ßalƒ±≈ümasƒ± i√ßin yapƒ±landƒ±rmadan BOTLOG_CHATID deƒüi≈ükenini ayarlamanƒ±z gerekir.")
        quit(1)

    elif not BOTLOG or not LOGSPAMMER:
        return

    entity = await bot.get_entity(BOTLOG_CHATID)
    if entity.default_banned_rights.send_messages:
        LOGS.info(
            "Hesabƒ±nƒ±zƒ±n BOTLOG_CHATID grubuna mesaj g√∂nderme yetkisi yoktur. "
            "Grup ID'sini doƒüru yazƒ±p yazmadƒ±ƒüƒ±nƒ±zƒ± kontrol edin.")
        quit(1)
if BOT_TOKEN != None:
    tgbot = TelegramClient(
        "TG_BOT_TOKEN",
        api_id=API_KEY,
        api_hash=API_HASH
    ).start(bot_token=BOT_TOKEN)
else:
    tgbot = None

with bot:
    try:
        bot(JoinChannelRequest("@DominantUserBot"))
        bot(JoinChannelRequest("@BenitaBlog"))

        moduller = CMD_HELP
        me = bot.get_me()
        uid = me.id


        @tgbot.on(events.NewMessage(pattern='/start'))
        async def handler(event):
            if not event.message.from_id == uid:
                await event.reply(f'`Merhaba ben` @DominantUserBot`! Ben sahibime (`@{me.username}`) yardƒ±mcƒ± olmak i√ßin varƒ±m, yaani sana yardƒ±mcƒ± olamam :/ Ama sen de bir Dominant a√ßabilirsin; Kanala bak` @DominantUserBot')
            else:
                await event.reply(f'`Senin i√ßin √ßalƒ±≈üƒ±yorum :) Seni seviyorum. ‚ù§Ô∏è`')

        @tgbot.on(events.InlineQuery)  # pylint:disable=E0602
        async def inline_handler(event):
            builder = event.builder
            result = None
            query = event.text
            if event.query.user_id == uid and query == "@DominantUserBot":
                rev_text = query[::-1]
                buttons = paginate_help(0, moduller, "helpme")
                result = builder.article(
                    f"L√ºtfen Sadece .yardƒ±m Komutu ƒ∞le Kullanƒ±n",
                    text="{}\nY√ºklenen Mod√ºl Sayƒ±sƒ±: {}".format(
                        "Merhaba! Ben @DominantUserBot kullanƒ±yorum!\n\nhttps://github.com/DominantUser/Dominant-UserBot", len(moduller)),
                    buttons=buttons,
                    link_preview=False
                )
            elif query.startswith("tb_btn"):
                result = builder.article(
                    "¬© @DominantUserBot",
                    text=f"@DominantUserBot ile g√º√ßlendirildi",
                    buttons=[],
                    link_preview=True
                )
            else:
                result = builder.article(
                    "¬© @DominantUserBot",
                    text="""@DominantUserBot'u kullanmayƒ± deneyin!
Hesabƒ±nƒ±zƒ± bot'a √ßevirebilirsiniz ve bunlarƒ± kullanabilirsiniz. Unutmayƒ±n, siz ba≈ükasƒ±nƒ±n botunu y√∂netemezsiniz! Alttaki GitHub adresinden t√ºm kurulum detaylarƒ± anlatƒ±lmƒ±≈ütƒ±r.""",
                    buttons=[
                        [custom.Button.url("Kanala Katƒ±l", "https://t.me/DominantUserBot"),
                        [custom.Button.url(
                            "GitHub", "https://github.com/DominantUser/Dominant-UserBot")]
                    ],
                    link_preview=False
                )
            await event.answer([result] if result else None)

        @tgbot.on(events.callbackquery.CallbackQuery(  # pylint:disable=E0602
            data=re.compile(b"helpme_next\((.+?)\)")
        ))
        async def on_plug_in_callback_query_handler(event):
            if event.query.user_id == uid:  # pylint:disable=E0602
                current_page_number = int(
                    event.data_match.group(1).decode("UTF-8"))
                buttons = paginate_help(
                    current_page_number + 1, moduller, "helpme")
                # https://t.me/TelethonChat/115200
                await event.edit(buttons=buttons)
            else:
                reply_pop_up_alert = "L√ºtfen kendine bir @DominantUserBot a√ß, benim mesajlarƒ±mƒ± d√ºzenlemeye √ßalƒ±≈üma!"
                await event.answer(reply_pop_up_alert, cache_time=0, alert=True)

        @tgbot.on(events.callbackquery.CallbackQuery(  # pylint:disable=E0602
            data=re.compile(b"helpme_prev\((.+?)\)")
        ))
        async def on_plug_in_callback_query_handler(event):
            if event.query.user_id == uid:  # pylint:disable=E0602
                current_page_number = int(
                    event.data_match.group(1).decode("UTF-8"))
                buttons = paginate_help(
                    current_page_number - 1,
                    moduller,  # pylint:disable=E0602
                    "helpme"
                )
                # https://t.me/TelethonChat/115200
                await event.edit(buttons=buttons)
            else:
                reply_pop_up_alert = "L√ºtfen kendine bir @DominantUserBot a√ß, benim mesajlarƒ±mƒ± d√ºzenlemeye √ßalƒ±≈üma!"
                await event.answer(reply_pop_up_alert, cache_time=0, alert=True)

        @tgbot.on(events.callbackquery.CallbackQuery(  # pylint:disable=E0602
            data=re.compile(b"ub_modul_(.*)")
        ))
        async def on_plug_in_callback_query_handlerm(event):
            if event.query.user_id == uid:  # pylint:disable=E0602
                modul_name = event.data_match.group(1).decode("UTF-8")

                cmdhel = str(CMD_HELP[modul_name])
                if len(cmdhel) > 90:
                    help_string = str(CMD_HELP[modul_name])[
                        :90] + "\n\nDevamƒ± i√ßin .dominant " + modul_name + " yazƒ±n."
                else:
                    help_string = str(CMD_HELP[modul_name])

                reply_pop_up_alert = help_string if help_string is not None else \
                    "{} mod√ºl√º i√ßin herhangi bir d√∂k√ºman yazƒ±lmamƒ±≈ü.".format(
                        modul_name)
                await event.answer(reply_pop_up_alert, cache_time=0, alert=True)
            else:
                reply_pop_up_alert = "L√ºtfen kendine bir @DominantUserBot a√ß, benim mesajlarƒ±mƒ± d√ºzenlemeye √ßalƒ±≈üma!"
                await event.answer(reply_pop_up_alert, cache_time=0, alert=True)
    except:
        LOGS.info(
            "Botunuzda inline desteƒüi devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±. "
            "Etkinle≈ütirmek i√ßin bir bot token tanƒ±mlayƒ±n ve botunuzda inline modunu etkinle≈ütirin. "
            "Eƒüer bunun dƒ±≈üƒ±nda bir sorun olduƒüunu d√º≈ü√ºn√ºyorsanƒ±z bize ula≈üƒ±n."
        )

    try:
        bot.loop.run_until_complete(check_botlog_chatid())
    except:
        LOGS.info(
            "BOTLOG_CHATID ortam deƒüi≈ükeni ge√ßerli bir varlƒ±k deƒüildir. "
            "Ortam deƒüi≈ükenlerinizi / config.env dosyanƒ±zƒ± kontrol edin."
        )
        quit(1)


# K√ºresel Deƒüi≈ükenler
COUNT_MSG = 0
USERS = {}
BRAIN_CHECKER = []
COUNT_PM = {}
LASTMSG = {}
ENABLE_KILLME = True
ISAFK = False
AFKREASON = None
ZALG_LIST = [[
    "Ãñ",
    " Ãó",
    " Ãò",
    " Ãô",
    " Ãú",
    " Ãù",
    " Ãû",
    " Ãü",
    " Ã†",
    " Ã§",
    " Ã•",
    " Ã¶",
    " Ã©",
    " Ã™",
    " Ã´",
    " Ã¨",
    " Ã≠",
    " ÃÆ",
    " ÃØ",
    " Ã∞",
    " Ã±",
    " Ã≤",
    " Ã≥",
    " Ãπ",
    " Ã∫",
    " Ãª",
    " Ãº",
    " ÕÖ",
    " Õá",
    " Õà",
    " Õâ",
    " Õç",
    " Õé",
    " Õì",
    " Õî",
    " Õï",
    " Õñ",
    " Õô",
    " Õö",
    " ",
],
    [
    " Ãç", " Ãé", " ÃÑ", " ÃÖ", " Ãø", " Ãë", " ÃÜ", " Ãê", " Õí", " Õó",
    " Õë", " Ãá", " Ãà", " Ãä", " ÕÇ", " ÕÉ", " ÕÑ", " Õä", " Õã", " Õå",
    " ÃÉ", " ÃÇ", " Ãå", " Õê", " ÃÅ", " Ãã", " Ãè", " ÃΩ", " Ãâ", " Õ£",
    " Õ§", " Õ•", " Õ¶", " Õß", " Õ®", " Õ©", " Õ™", " Õ´", " Õ¨", " Õ≠",
    " ÕÆ", " ÕØ", " Ãæ", " Õõ", " ÕÜ", " Ãö"
],
    [
    " Ãï",
    " Ãõ",
    " ÕÄ",
    " ÕÅ",
    " Õò",
    " Ã°",
    " Ã¢",
    " Ãß",
    " Ã®",
    " Ã¥",
    " Ãµ",
    " Ã∂",
    " Õú",
    " Õù",
    " Õû",
    " Õü",
    " Õ†",
    " Õ¢",
    " Ã∏",
    " Ã∑",
    " Õ°",
]]
